diff --git a/src/clueGame/BadConfigFormatException.java b/src/clueGame/BadConfigFormatException.java
index a6d20ed..be00b4c 100644
--- a/src/clueGame/BadConfigFormatException.java
+++ b/src/clueGame/BadConfigFormatException.java
@@ -1,5 +1,12 @@
 package clueGame;
 
 public class BadConfigFormatException extends Exception {
-
+	private String errorMsg;
+	
+	public BadConfigFormatException() {
+		errorMsg = "Error: Bad Config Format";
+	}
+	public BadConfigFormatException(String message) {
+		errorMsg = message;
+	}
 }
diff --git a/src/clueGame/Board.java b/src/clueGame/Board.java
index be52a6e..5080c1f 100644
--- a/src/clueGame/Board.java
+++ b/src/clueGame/Board.java
@@ -3,6 +3,7 @@ package clueGame;
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Scanner;
@@ -12,13 +13,13 @@ public class Board {
 
 	// member variables
 	private BoardCell[][] grid;
-	private ArrayList<String[]> stringGrid = new ArrayList();
+	private ArrayList<String[]> stringGrid;
 	private Set<BoardCell> targets;
 	private Set<BoardCell> visited;
 	private String layoutConfigFile;
 	private String setupConfigFile;
 	private Map<Character, Room> roomMap;
-	private static Board theInstance = new Board();
+	private static Board theInstance;
 
 	// Size of the board
 	private int numRows;
@@ -31,6 +32,8 @@ public class Board {
 
 	// this method returns the only Board
 	public static Board getInstance() {
+		theInstance = new Board();
+
 		return theInstance;
 	}
 
@@ -67,52 +70,76 @@ public class Board {
 	// initialize the board
 	public void initialize() {
 		try {
-			File layoutConfig = new File(layoutConfigFile);
-			Scanner fin = new Scanner(layoutConfig);
-			String[] temp;
-			while(fin.hasNext()) {
-				temp = fin.nextLine().split(",");
-				stringGrid.add(temp);
-				numCols = temp.length;
-				numRows++;
-			}
-			grid = new BoardCell[numRows][numCols];
-			File setupConfig = new File(setupConfigFile); 
-			fin = new Scanner(setupConfig);
-			BoardCell currCenterCell = null;
-			BoardCell currLabelCell = null;
-			while(fin.hasNext()) {
-				temp = fin.nextLine().split(", ");
-				if(!temp[0].contains("//")) {
-					for(int i = 0; i < numRows; i++) {
-						for(int j = 0; j < numCols; j++) {
-							if(stringGrid.get(i)[j] == temp[2].charAt(0) + "*") {
-								currCenterCell = new BoardCell(i, j);
-							}
-							if(stringGrid.get(i)[j] == temp[2].charAt(0) + "#") {
-								currLabelCell = new BoardCell(i, j);
-							}
-						}
-					}
-					if(temp[0] == "Room") {
-						roomMap.put(temp[2].charAt(0), new Room(temp[1], currCenterCell, currLabelCell));
-					}
-				}
-			}
-			// Room, Canal, C
+			loadSetupConfig();
+			loadLayoutConfig();
 		} catch (FileNotFoundException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		} catch (BadConfigFormatException e) {
+			// TODO Auto-generated catch block
 			e.printStackTrace();
-			System.out.println("Could not read file layout");
 		}
+
 		// Create a temporary array 
 		BoardCell[] temp;
 		grid = new BoardCell[numRows][numCols];
-		for(int i = 0; i < numRows; i++) {	
+		for(int i = 0; i < numRows; i++) {
 			// Create a new array in temp, allocate memory
 			temp = new BoardCell[numRows];
 			for(int j = 0; j < numCols; j++) {
 				// Create a temporary cell, add it to the temporary list
+				// member variables
 				BoardCell currCell = new BoardCell(i, j);
+				currCell.setInitial(stringGrid.get(i)[j].charAt(0));
+				// isRoom
+				if(roomMap.containsKey(stringGrid.get(i)[j].charAt(0)) && stringGrid.get(i)[j].charAt(0) != 'X' && stringGrid.get(i)[j].charAt(0) != 'W') {
+					currCell.setRoom(true);
+				} else {
+					currCell.setRoom(false);
+				}
+
+				if(stringGrid.get(i)[j].contains("v")) {
+					currCell.setDoorway(true);
+					currCell.setDoorDirection(DoorDirection.DOWN);
+
+				} else if(stringGrid.get(i)[j].contains("<")) {
+					currCell.setDoorway(true);
+					currCell.setDoorDirection(DoorDirection.LEFT);
+
+				} else if(stringGrid.get(i)[j].contains(">")) {
+					currCell.setDoorway(true);
+					currCell.setDoorDirection(DoorDirection.RIGHT);
+
+				} else if(stringGrid.get(i)[j].contains("^")) {
+					currCell.setDoorway(true);
+					currCell.setDoorDirection(DoorDirection.UP);
+
+				} else {
+					currCell.setDoorway(false);
+					currCell.setDoorDirection(DoorDirection.NONE);
+				}
+
+				if(stringGrid.get(i)[j].contains("#")) {
+					currCell.setLabel(true);
+					roomMap.get(stringGrid.get(i)[j].charAt(0)).setLabelCell(currCell);
+				} else {
+					currCell.setLabel(false);
+				}
+				if(stringGrid.get(i)[j].length() > 1) {
+					if(!stringGrid.get(i)[j].contains("#") && 
+							!stringGrid.get(i)[j].contains("*") && 
+							!stringGrid.get(i)[j].contains("v") && 
+							!stringGrid.get(i)[j].contains("<") && 
+							!stringGrid.get(i)[j].contains(">") && 
+							!stringGrid.get(i)[j].contains("^"))
+						currCell.setSecretPassage(stringGrid.get(i)[j].charAt(1));
+				}
+				if(stringGrid.get(i)[j].contains("*")) {
+					currCell.setRoomCenter(true);
+					roomMap.get(stringGrid.get(i)[j].charAt(0)).setCenterCell(currCell);
+				} else {
+					currCell.setRoomCenter(false);
+				}
 				temp[j] = currCell;
 			}
 			// add the temporary list to the board
@@ -142,16 +169,54 @@ public class Board {
 
 	}
 
-	public void loadConfigFiles() {
-
-	}
-
 	// initializes the roomMap according to the setup config
-	public void loadSetupConfig() {
-
+	public void loadSetupConfig() throws BadConfigFormatException, FileNotFoundException {
+		roomMap = new HashMap();
+		File setupConfig = new File(setupConfigFile); 
+		Scanner fin = new Scanner(setupConfig);
+		String[] temp;
+		while(fin.hasNext()) {
+			temp = fin.nextLine().split(", ");
+			if(!temp[0].contains("//")) {
+				// Test that an exception is thrown for a config file with a room type
+				// that is not Card or Other
+				if(!temp[0].contains("Room") && !temp[0].contains("Space")) {
+					throw new BadConfigFormatException();
+				}
+				roomMap.put(temp[2].charAt(0), new Room(temp[1]));
+			}
+		}
 	}
-
-	public void loadLayoutConfig() {	
+	// Test that an exception is thrown for a config file that does not
+	// have the same number of columns for each row
+
+	public void loadLayoutConfig() throws BadConfigFormatException, FileNotFoundException {	
+		stringGrid = new ArrayList();
+		File layoutConfig = new File(layoutConfigFile);
+		Scanner fin = new Scanner(layoutConfig);
+		String[] temp;
+		int prev = 0;
+		while(fin.hasNext()) {
+			temp = fin.nextLine().split(",");
+			stringGrid.add(temp);
+			prev = numCols;
+			numCols = temp.length;
+			if(numCols != prev && numRows > 0) {
+				throw new BadConfigFormatException();
+			}
+			numRows++;
+		}
+		
+		for(int i = 0; i < numRows; i++) {
+			// Test that an exception is thrown for a config file that specifies
+			// a room that is not in the legend. See first test for other important
+			// comments.
+			for(int j = 0; j < numCols; j++) {
+				if(!roomMap.containsKey(stringGrid.get(i)[j].charAt(0))) {
+					throw new BadConfigFormatException();
+				}
+			}
+		}
 
 	}
 
@@ -167,15 +232,15 @@ public class Board {
 	}
 
 	public BoardCell getCell(int row, int col) {
-		return new BoardCell(0, 0);
+		return grid[row][col];
 	}
 
 	public Room getRoom(BoardCell cell) {
-		return new Room("Stub", new BoardCell(0,0), new BoardCell(0,0));
+		return roomMap.get(cell.getInitial());
 	}
 
 	public Room getRoom(char c) {
-		return new Room("Stub", new BoardCell(0,0), new BoardCell(0,0));
+		return roomMap.get(c);
 	}
 
 	public int getNumRows() {
diff --git a/src/clueGame/BoardCell.java b/src/clueGame/BoardCell.java
index 1747a45..fd50b2a 100644
--- a/src/clueGame/BoardCell.java
+++ b/src/clueGame/BoardCell.java
@@ -50,6 +50,9 @@ public class BoardCell {
 		return isOccupied;
 	}
 
+	public void setDoorway(boolean t) {
+		isDoorway = t;
+	}
 	
 	public boolean isDoorway() {
 		return isDoorway;
@@ -62,20 +65,36 @@ public class BoardCell {
 	public void setInitial(char currInitial) {
 		initial = currInitial;
 	}
+	
+	public void setLabel(boolean label) {
+		roomLabel = label;
+	}
 	public boolean isLabel() {
 		return roomLabel;
 	}
 	
+	public void setRoomCenter(boolean center) {
+		roomCenter = center;
+	}
+	
 	public boolean isRoomCenter() {
 		return roomCenter;
 	}
 	
 	public char getSecretPassage() {
-		return '\0';
+		return secretPassage;
+	}
+	
+	public void setDoorDirection(DoorDirection dir) {
+		doorDirection = dir;
 	}
 	
 	public DoorDirection getDoorDirection() {
 		return doorDirection;
 	}
 
+	public void setSecretPassage(char c) {
+		secretPassage = c;
+	}
+
 }
\ No newline at end of file
diff --git a/src/clueGame/Room.java b/src/clueGame/Room.java
index 187b6c1..0200e3a 100644
--- a/src/clueGame/Room.java
+++ b/src/clueGame/Room.java
@@ -7,6 +7,10 @@ public class Room {
 	private BoardCell labelCell;
 	
 	// constructor
+	public Room(String aName) {
+		super();
+		setName(aName);
+	}
 	public Room(String aName, BoardCell center, BoardCell label) {
 		super();
 		setName(aName);
diff --git a/src/tests/FileInitTests.java b/src/tests/FileInitTests.java
index 643b63f..8fd9340 100644
--- a/src/tests/FileInitTests.java
+++ b/src/tests/FileInitTests.java
@@ -108,7 +108,7 @@ public class FileInitTests {
 		room = board.getRoom(cell);
 		assertTrue(room != null);
 		assertEquals(room.getName(), "Left Apartments");
-		assertTrue(cell.getSecretPassage() == 'K');
+		assertTrue(cell.getSecretPassage() == 'R');
 		
 		// check if a cell is a walkway
 		cell = board.getCell(4, 0);
